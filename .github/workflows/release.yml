name: Release

on:
  push:
    tags:
      - 'v*'
      - 'nightly-*'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.tag-check.outputs.is-release }}
      is-nightly: ${{ steps.tag-check.outputs.is-nightly }}
      version: ${{ steps.tag-check.outputs.version }}
    steps:
      - name: Check tag format
        id: tag-check
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag-name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          if [[ $TAG_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is-release=true" >> $GITHUB_OUTPUT
            echo "is-nightly=false" >> $GITHUB_OUTPUT
            echo "version=${TAG_NAME#v}" >> $GITHUB_OUTPUT
          elif [[ $TAG_NAME =~ ^nightly-[0-9]{8}-[a-f0-9]{7}$ ]]; then
            echo "is-release=false" >> $GITHUB_OUTPUT
            echo "is-nightly=true" >> $GITHUB_OUTPUT  
            echo "version=$TAG_NAME" >> $GITHUB_OUTPUT
          else
            echo "Invalid tag format: $TAG_NAME"
            exit 1
          fi

  build-and-test:
    runs-on: ubuntu-latest
    needs: validate-tag
    steps:
      - uses: actions/checkout@v4
      
      - uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          
      - name: Run comprehensive tests
        run: |
          nix flake check
          nix develop --command test-comprehensive
          
      - name: Build packages
        run: |
          nix build .#crush
          nix build .#default
          
      - name: Test applications
        run: |
          # Test nix run functionality
          timeout 10s nix run . -- --help || echo "App test completed"

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test]
    if: needs.validate-tag.outputs.is-release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate release notes
        id: release-notes
        run: |
          # Extract version from tag
          VERSION="${{ needs.validate-tag.outputs.version }}"
          
          # Generate release notes from changelog and recent commits
          cat > release_notes.md << EOF
          # Crush Flake v$VERSION
          
          Automated Nix flake for Charm's Crush AI coding agent.
          
          ## Installation
          
          \`\`\`bash
          # Install from this release
          nix profile install github:conneroisu/crush-flake/${{ github.ref_name }}
          
          # Run directly
          nix run github:conneroisu/crush-flake/${{ github.ref_name }}
          \`\`\`
          
          ## What's Included
          
          - 🔄 Automatic tracking of Crush nightly releases
          - 🧪 Comprehensive testing and validation
          - 🌍 Cross-platform support (Linux x86_64/aarch64, macOS Intel/Apple Silicon)
          - ⚡ Development environment with automation tools
          - 🏗️ Intelligent vendor hash management
          
          ## Changes
          
          EOF
          
          # Try to extract changes from CHANGELOG.md
          if grep -A 20 "## \[Unreleased\]" CHANGELOG.md > /dev/null 2>&1; then
            grep -A 20 "## \[Unreleased\]" CHANGELOG.md | tail -n +3 | sed '/^## /q' | head -n -1 >> release_notes.md
          else
            echo "- See commit history for detailed changes" >> release_notes.md
          fi
          
          echo "Release notes generated"
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Crush Flake ${{ needs.validate-tag.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  create-nightly-release:
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-test] 
    if: needs.validate-tag.outputs.is-nightly == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          
      - name: Generate nightly release notes
        id: nightly-notes
        run: |
          # Extract information about current crush version
          CRUSH_REV=$(nix flake metadata --json | jq -r '.locks.nodes["crush-src"].locked.rev // "unknown"')
          CRUSH_DATE=$(nix flake metadata --json | jq -r '.locks.nodes["crush-src"].locked.lastModified // 0' | xargs -I {} date -d @{} '+%Y-%m-%d %H:%M:%S UTC' 2>/dev/null || echo "unknown")
          
          cat > nightly_notes.md << EOF
          # Nightly Build - ${{ needs.validate-tag.outputs.version }}
          
          Automated nightly build of Crush AI coding agent.
          
          ## Upstream Information
          
          - **Crush Revision**: \`$CRUSH_REV\`
          - **Crush Date**: $CRUSH_DATE
          - **Source**: [charmbracelet/crush@$CRUSH_REV](https://github.com/charmbracelet/crush/commit/$CRUSH_REV)
          
          ## Installation
          
          \`\`\`bash
          # Install this nightly build
          nix profile install github:conneroisu/crush-flake/${{ github.ref_name }}
          
          # Run directly
          nix run github:conneroisu/crush-flake/${{ github.ref_name }}
          \`\`\`
          
          ## Verification
          
          - ✅ Build tested and verified
          - ✅ Binary functionality confirmed  
          - ✅ Cross-platform compatibility validated
          - ✅ Automated tests passing
          
          ---
          
          🤖 This nightly release was automatically generated and tested.
          EOF
          
      - name: Create Nightly Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Nightly ${{ needs.validate-tag.outputs.version }}
          body_path: nightly_notes.md
          draft: false
          prerelease: true